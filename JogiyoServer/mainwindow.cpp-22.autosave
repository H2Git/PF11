#include "mainwindow.h"
#include "ui_mainwindow.h"
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{

    ui->setupUi(this);
    ui->stackedWidget->setCurrentIndex(0);

    // UI setting

    this->setWindowTitle("JoGiYo Server Management System");

    QPixmap main(":/img/44.png");
    ui->mainpageLogo->setPixmap(main);
    ui->mainpageLogo->setPixmap(main.scaled(960,540, Qt::KeepAspectRatio));

    ui->AutoLoginCheckBox->setStyleSheet("margin-left:6;");

    ui->InputID->setStyleSheet("QLineEdit{padding-left:6px;}");
    ui->InputPW->setStyleSheet("QLineEdit{padding-left:6px;}");

    ui->lineEdit_1->setStyleSheet("QLineEdit{padding-left:6px;}");
    ui->lineEdit_2->setStyleSheet("QLineEdit{padding-left:6px;}");
    ui->lineEdit_3->setStyleSheet("QLineEdit{padding-left:6px;}");
    ui->lineEdit_4->setStyleSheet("QLineEdit{padding-left:6px;}");
    ui->lineEdit_5->setStyleSheet("QLineEdit{padding-left:6px;}");

    ui->LoginBox->setFlat(true);
    ui->LoginBox->setStyleSheet("border:0;");

    ui->nextPage->setVisible(false);

    //    ui->CheckDBFrame->setFlat(true);
    //    ui->CheckDBFrame->setStyleSheet("border:0;");

    // DB
    db = new DB();
    m_server = new QTcpServer();

    displayMessage(QString("조기요 서버 관리 프로그램이 시작됩니다."));

    // TCP/IP
    if(m_server->listen(QHostAddress::Any, 8080))
    {
        connect(this, &MainWindow::newMessage, this, &MainWindow::displayMessage);
        connect(m_server, &QTcpServer::newConnection, this, &MainWindow::newConnection);
        ui->statusbar->showMessage("TCP Server is listening...");
        displayMessage(QString("<font style = ' color: GREEN;'> TCP Server 연결에 성공했습니다.</ font>"));
    }
    else
    {
        //QMessageBox::critical(this,"QTCPServer",QString("Unable to start the server: %1.").arg(m_server->errorString()));
        ui->statusbar->showMessage(QString("Unable to start the server: %1.").arg(m_server->errorString()));
        displayMessage(QString("<font style = ' color: RED;'> TCP Server 연결에 실패했습니다.</ font>"));
        //exit(EXIT_FAILURE);
    }


}

MainWindow::~MainWindow()
{
    // TCP/IP 연결 소캣 제거
    foreach (QTcpSocket* socket, connection_set)
    {
        socket->close();
        socket->deleteLater();
    }

    // 서버 소켓 제거
    m_server->close();
    m_server->deleteLater();

    delete ui;
}

void MainWindow::newConnection()
{
    while (m_server->hasPendingConnections())
        appendToSocketList(m_server->nextPendingConnection());
}

void MainWindow::appendToSocketList(QTcpSocket* socket)
{
    connection_set.insert(socket);
    connect(socket, &QTcpSocket::readyRead, this, &MainWindow::readSocket);
    connect(socket, &QTcpSocket::disconnected, this, &MainWindow::discardSocket);
    connect(socket, &QAbstractSocket::errorOccurred, this, &MainWindow::displayError);
    ui->comboBox_receiver->addItem(QString::number(socket->socketDescriptor()));

    displayMessage(QString("<font style = ' color: GREEN;'> Info :: 접속자 sockd: %1, 서버에 접속했습니다.</ font>").arg(socket->socketDescriptor()));
    displayMessage(QString("<font style = ' color: GREEN;'> Info :: 콤보박스에 접속자 리스트가 업데이트됩니다.</ font>").arg(socket->socketDescriptor()));
    //<font style = ' color: blue;'> Test </ font> string!"
}

void MainWindow::discardSocket()
{
    QTcpSocket* socket = reinterpret_cast<QTcpSocket*>(sender());
    QSet<QTcpSocket*>::iterator it = connection_set.find(socket);
    if (it != connection_set.end()){
        displayMessage(QString("<font style = ' color: RED;'> Info :: 접속자 sockd: %1, 서버와 연결이 종료됩니다.</ font>").arg(socket->socketDescriptor()));
        connection_set.remove(*it);
    }
    refreshComboBox();

    socket->deleteLater();
}

void MainWindow::displayError(QAbstractSocket::SocketError socketError)
{
    switch (socketError) {
    case QAbstractSocket::RemoteHostClosedError:
        break;
    case QAbstractSocket::HostNotFoundError:
        QMessageBox::information(this, "QTCPServer", "The host was not found. Please check the host name and port settings.");
        break;
    case QAbstractSocket::ConnectionRefusedError:
        QMessageBox::information(this, "QTCPServer", "The connection was refused by the peer. Make sure QTCPServer is running, and check that the host name and port settings are correct.");
        break;
    default:
        QTcpSocket* socket = qobject_cast<QTcpSocket*>(sender());
        QMessageBox::information(this, "QTCPServer", QString("The following error occurred: %1.").arg(socket->errorString()));
        break;
    }
}

void MainWindow::displayMessage(const QString& str)
{
    ui->textBrowser_receivedMessages->append(str);
}

void MainWindow::refreshComboBox(){

    displayMessage(QString("<font style = ' color: RED;'> Info :: 콤보박스 접속자 리스트가 갱신됩니다.</ font>"));

    ui->comboBox_receiver->clear();
    ui->comboBox_receiver->addItem("Broadcast");
    foreach(QTcpSocket* socket, connection_set)
        ui->comboBox_receiver->addItem(QString::number(socket->socketDescriptor()));
}

void MainWindow::readSocket()
{
    QTcpSocket* socket = reinterpret_cast<QTcpSocket*>(sender());

    QByteArray buffer;

    QDataStream socketStream(socket);
    socketStream.setVersion(QDataStream::Qt_5_15);

    socketStream.startTransaction();
    socketStream >> buffer;

    if(!socketStream.commitTransaction())
    {
        QString message = QString("%1 :: Waiting for more data to come..").arg(socket->socketDescriptor());
        emit newMessage(message);
        return;
    }

    QString header = buffer.mid(0,128);

    QStringList list = header.split(",");
    QString fileType = list[0].split(":")[1]; // messege,
    QString fileName = list[1].split(":")[1]; // user id

    buffer = buffer.mid(128);

    qDebug() << "aaa " << buffer;
    qDebug() << "bbb " << fileType;
    qDebug() << "ccc " << fileName;

    QSqlQuery qry;

    if(fileType=="message"){
        QString message = QString("%1(%2) :: %3 %4").arg(socket->socketDescriptor()).arg(fileName, fileType, QString::fromStdString(buffer.toStdString()));
        emit newMessage(message); // 이거 왜 안되지?

        displayMessage(QString("접속자 sockd: %1").arg(message));
    }
    else if(fileType=="customerLogin")
    {
        QString message = QString("%1(%2) :: %3 %4").arg(socket->socketDescriptor()).arg(fileName, fileType, QString::fromStdString(buffer.toStdString()));
        emit newMessage(message);

        // buffer 값으로 아이디만 받아오도록 해서 WHERE 아이디에 넣기
        qry.exec(QString("SELECT 비밀번호 FROM test.고객 WHERE 고객아이디='") + QString(buffer) + QString("'"));
        sendCustomerLogin(socket, qry);

        displayMessage(QString("<font style = ' color: GREEN;'> 고객이 로그인 DB value를 요청했습니다.</ font>"));
    }
    else if(fileType=="storeLogin")
    {
        QString message = QString("%1(%2) :: %3 %4").arg(socket->socketDescriptor()).arg(fileName, fileType, QString::fromStdString(buffer.toStdString()));
        emit newMessage(message);

        // buffer 값으로 아이디만 받아오도록 해서 WHERE 아이디에 넣기
        qry.exec(QString("SELECT 비밀번호 FROM test.매장 WHERE 매장아이디='") + QString(buffer) + QString("'"));
        sendStoreLogin(socket, qry);

        qry.exec(QString("UPDATE test.매장 SET 소캣=%1 WHERE 매장아이디='%2'").arg(socket->socketDescriptor()).arg(buffer));

        ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> 매장이 로그인 DB value를 요청하였습니다.</ font>"));
    }
    else if(fileType=="storelist")
    {
        qry.exec(QString("SELECT * FROM `Company`.상점"));
        QString message = QString("%1(%2) :: %3 %4").arg(socket->socketDescriptor()).arg(fileName, fileType, QString::fromStdString(buffer.toStdString()));
        emit newMessage(message);

        ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> 고객이 DB의 매장 list를 요청하였습니다.</ font>"));
    }
    else if(fileType=="menulist")
    {
        qry.exec(QString("SELECT * FROM `Company`.제품"));
        QString message = QString("%1(%2) :: %3 %4").arg(socket->socketDescriptor()).arg(fileName, fileType, QString::fromStdString(buffer.toStdString()));
        emit newMessage(message);

        ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> 고객이 매장의 DB menui list 를 요청하였습니다.</ font>"));
    }
    else if(fileType=="order")
    {
        QString message = QString("%1(%2) :: %3 %4").arg(socket->socketDescriptor()).arg(fileName, fileType, QString::fromStdString(buffer.toStdString()));
        emit newMessage(message);
        order(buffer);

        ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> 고객이 주문을 요청하였습니다.</ font>"));

    }
    else if(fileType=="orderList")
    {
        QString message = QString("%1(%2) :: %3 %4").arg(socket->socketDescriptor()).arg(fileName, fileType, QString::fromStdString(buffer.toStdString()));
        emit newMessage(message);

        qry.exec(QString("SELECT 주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자 FROM test.주문"));
        sendOrderList(socket, qry);

        ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> 고객이 주문리스트를 DB에 요청하였습니다.</ font>"));
    }
    else if(fileType=="check")
    {
        qry.exec(QString("SELECT * FROM `Company`.주문"));
        QString message = QString("%1(%2) :: %3 %4").arg(socket->socketDescriptor()).arg(fileName, fileType, QString::fromStdString(buffer.toStdString()));
        emit newMessage(message);
    }
}

void MainWindow::on_pushButton_sendMessage_clicked()
{
    QString receiver = ui->comboBox_receiver->currentText();

    if(receiver=="Broadcast")
    {
        foreach (QTcpSocket* socket, connection_set)
        {
            sendMessage(socket);

            displayMessage(QString("<font style = ' color: GREEN;'> 서버에서 전체 접속자에게 공지를 보냅니다.</ font>"));
        }
    }
    else
    {
        foreach (QTcpSocket* socket, connection_set)
        {
            if(socket->socketDescriptor() == receiver.toLongLong())
            {
                sendMessage(socket);

                displayMessage(QString("<font style = ' color: GREEN;'> 서버에서  특정 접속자에게 메시지를 보냅니다.</ font>"));

                break;

            }
        }
    }
    ui->lineEdit_message->clear();
}

void MainWindow::sendMessage(QTcpSocket* socket)
{
    if(socket)
    {
        if(socket->isOpen())
        {
            QString str = ui->lineEdit_message->text();

            QDataStream socketStream(socket);
            socketStream.setVersion(QDataStream::Qt_5_15);

            QByteArray header;
            header.prepend(QString("fileType:message,fileName:관리자,fileSize:%1;").arg(str.size()).toUtf8());
            header.resize(128);

            QByteArray byteArray = str.toUtf8();
            byteArray.prepend(header);

            socketStream.setVersion(QDataStream::Qt_5_15);
            socketStream << byteArray;

            displayMessage(QString("<font style = ' color: GREEN;'> 메시지 전송에 성공했습니다.</ font>"));
        }
        else
        {
            QMessageBox::critical(this,"QTCPServer","Socket doesn't seem to be opened");
            displayMessage(QString("<font style = ' color: RED;'> 메시지 전송에 실패했습니다.</ font>"));

        }
    }
    else
        QMessageBox::critical(this,"QTCPServer","Not connected");
}

void MainWindow::sendCustomerLogin(QTcpSocket* socket, QSqlQuery qry)
{
    bool select = true;
    QString pw;

    if(!(select = qry.next()))
    {
        qDebug() << "아이디 검색 결과 없음";
        //QMessageBox::information(this, "Login", "검색어를 정확히 입력해주세요.");
        return;
    }
    else
    {
        while(select)
        {
            pw = qry.value(0).toString();
            select = qry.next();
        }
    }

    if(socket)
    {
        if(socket->isOpen())
        {
            QDataStream socketStream(socket);
            socketStream.setVersion(QDataStream::Qt_5_15);

            QByteArray header;
            header.prepend(QString("fileType:customerLoginReturn,fileName:관리자,fileSize:%1;").arg(pw.size()).toUtf8());
            header.resize(128);

            QByteArray byteArray = pw.toUtf8();
            byteArray.prepend(header);

            socketStream.setVersion(QDataStream::Qt_5_15);
            socketStream << byteArray;
        }
        else
            QMessageBox::critical(this,"QTCPServer","Socket doesn't seem to be opened");
    }
    else
        QMessageBox::critical(this,"QTCPServer","Not connected");
}

void MainWindow::sendStoreLogin(QTcpSocket* socket, QSqlQuery qry)
{
    bool select = true;
    QString pw;

    if(!(select = qry.next()))
    {
        qDebug() << "아이디 검색 결과 없음";
        displayMessage(QString("<font style = ' color: RED;'> 고객의 로그인 DB 결과가 없습니다.</ font>"));
        return;
    }
    else
    {
        while(select)
        {
            pw = qry.value(0).toString();
            select = qry.next();
        }

        displayMessage(QString("<font style = ' color: GREEN;'> 고객의 로그인 DB 결과를 찾았습니다..</ font>"));
    }

    if(socket)
    {
        if(socket->isOpen())
        {
            QDataStream socketStream(socket);
            socketStream.setVersion(QDataStream::Qt_5_15);

            QByteArray header;
            header.prepend(QString("fileType:storeLoginReturn,fileName:관리자,fileSize:%1;").arg(pw.size()).toUtf8());
            header.resize(128);

            QByteArray byteArray = pw.toUtf8();
            byteArray.prepend(header);

            socketStream.setVersion(QDataStream::Qt_5_15);
            socketStream << byteArray;

            displayMessage(QString("<font style = ' color: GREEN;'> 고객의 로그인 DB 결과를 전송합니다.</ font>"));
        }
        else
        {
            QMessageBox::critical(this,"QTCPServer","Socket doesn't seem to be opened");
            displayMessage(QString("<font style = ' color: RED;'> 고객의 로그인 DB 결과를 전송에 실패했습니다.</ font>"));
        }
    }
    else
    {
        QMessageBox::critical(this,"QTCPServer","Not connected");
        
    }
}

void MainWindow::order(QByteArray buffer)
{
    QString a = QString::fromStdString(buffer.toStdString());

    qDebug() << "a : " << a;

    QStringList list = a.split(",");

    QString order, storename, item, cnt, address;

    order = list[0];
    storename = list[1];
    item = list[2];
    cnt = list[3];
    address = list[4];

    qDebug() << "order : " << order;
    qDebug() << "storename : " << storename;
    qDebug() << "item : " << item;
    qDebug() << "cnt : " << cnt;
    qDebug() << "address : " << address;

    QSqlQuery qry;
    qry.exec(QString("INSERT INTO test.주문 (주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자) VALUES('%1', '%2', '%3', %4, '%5', now())").arg(order, storename, item, cnt, address));
    qDebug() << "qry : " <<  QString("INSERT INTO test.주문 (주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자) VALUES('%1', '%2', '%3', %4, '%5', now())").arg(order, storename, item, cnt, address);

    if (qry.numRowsAffected() < 1)
    {
        qDebug() << "업데이트 실패";

        ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> 주문 업데이트 성공 </ font>"));
    }
    else
    {
        qDebug() << "업데이트 성공";
        sendArduinoSignal(storename);

        ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> 주문 업데이트 실패 </ font>"));
    }

}

void MainWindow::sendArduinoSignal(QString storeName)
{
    QSqlQuery qry;

    qDebug() << "SD : " << qry.exec(QString("SELECT 소캣 FROM test.매장 WHERE 매장아이디='%1'").arg(storeName));
    //qDebug() << "query : " << qry.exec(QString("SELECT 소캣 FROM test.매장 WHERE 매장아이디='%1'"));

    qry.next();
    QString sd = qry.value(0).toString();
    qDebug() << "sd " << sd;
    QString sd1 = qry.value(1).toString();
    qDebug() << "sd1 " << sd1;
    QString sd2 = qry.value(2).toString();
    qDebug() << "sd2 " << sd2;

    foreach (QTcpSocket* socket, connection_set)
    {
        qDebug() << "sock" << socket->socketDescriptor();

        if(socket->socketDescriptor() == sd.toLongLong())
        {

            if(socket->isOpen())
            {
                QString str;

                QDataStream socketStream(socket);
                socketStream.setVersion(QDataStream::Qt_5_15);

                QByteArray header;
                header.prepend(QString("fileType:arduino,fileName:관리자,fileSize:%1;").arg(str.size()).toUtf8());
                header.resize(128);

                QByteArray byteArray = str.toUtf8();
                byteArray.prepend(header);

                socketStream.setVersion(QDataStream::Qt_5_15);
                socketStream << byteArray;

                ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> 매장으로 아두이노 신호를 보냅니다. </ font>"));
            }
            else
                QMessageBox::critical(this,"QTCPServer","Socket doesn't seem to be opened");
        }
        else
        {
            QMessageBox::critical(this,"QTCPServer","Not connected");

            ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> 아두이노 신호를 보낼 매장과 접속되어 있지 않습니다.. </ font>"));
        }
    }
}

void MainWindow::sendOrderList(QTcpSocket* socket, QSqlQuery qry)
{
    bool select = true;
    QString order, customer, item, cnt, address, datetime;
    QString qryRow;

    if(!(select = qry.next()))
    {
        qDebug() << "주문 검색 결과 없음";
        //QMessageBox::information(this, "Login", "검색어를 정확히 입력해주세요.");
        return;
    }
    else
    {
        while(select)
        {
            qryRow = "";

            order = qry.value(0).toString();
            customer = qry.value(1).toString();
            item = qry.value(0).toString();
            cnt = qry.value(2).toString();
            address = qry.value(3).toString();
            datetime = qry.value(4).toString();

            qryRow = order + "," + customer + "," + item + "," + cnt + "," + address + "," + datetime;
            qDebug() << "qryRow : " << qryRow;

            select = qry.next();

            if(socket)
            {
                if(socket->isOpen())
                {
                    QDataStream socketStream(socket);
                    socketStream.setVersion(QDataStream::Qt_5_15);

                    QByteArray header;
                    header.prepend(QString("fileType:orderListReturn,fileName:관리자,fileSize:%1;").arg(qryRow.size()).toUtf8());
                    header.resize(128);

                    QByteArray byteArray = qryRow.toUtf8();
                    byteArray.prepend(header);

                    socketStream.setVersion(QDataStream::Qt_5_15);
                    socketStream << byteArray;

                    qDebug() << "byteArray : " << byteArray;

                    ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> 메뉴 리스트 전송에 성공했습니다. </ font>"));

                }
                else
                    QMessageBox::critical(this,"QTCPServer","Socket doesn't seem to be opened");
            }
            else
                QMessageBox::critical(this,"QTCPServer","Not connected");
        }
    }

}



void MainWindow::on_StartServer_clicked()
{
    QString id = ui->InputID->text();
    QString pw = ui->InputPW->text();

    if (id == "manager" && pw == "manager")
    {
        QMessageBox::information(this, "Login", "ID and Passwod is Correct :) \nWelcome Manager!");
        ui->stackedWidget->setCurrentIndex(1);
    }
    else
    {

        QMessageBox::information(this, "Login", "Login Fail T.T");
    }

    db->ConnectDB();

    ui->lineEdit_1->setPlaceholderText("현재값: " + db->getHostName());
    ui->lineEdit_2->setPlaceholderText("현재값: " + QString::number(db->getPort()));
    ui->lineEdit_3->setPlaceholderText("현재값: " + db->getDatabaseName());
    ui->lineEdit_4->setPlaceholderText("현재값: " + db->getUserName());
    ui->lineEdit_5->setPlaceholderText("현재값: " + db->getPassword());

    QSqlDatabase db = QSqlDatabase::database();


    if(!db.open())
    {
        QPixmap DBBG_error(":/img/55.png");
        ui->DBBG->setPixmap(DBBG_error);
        ui->DBBG->setPixmap(DBBG_error.scaled(960,540, Qt::KeepAspectRatio));
        ui->ResetDB->setStyleSheet("color: rgb(164, 0, 0); background-color: rgb(239, 41, 41); border-color: rgb(196, 160, 0);");
        ui->ResetDB->setText("DB 연결 실패");

        ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> DB 연결 실패. </ font>"));

        // DB 종료
        db.close();
        QSqlDatabase::removeDatabase(db.connectionName());
    }
    else
    {
        QPixmap DBBG_connected(":/img/66.png");
        ui->DBBG->setPixmap(DBBG_connected);
        ui->DBBG->setPixmap(DBBG_connected.scaled(960,540, Qt::KeepAspectRatio));
        //ui->ResetDB->setStyleSheet("background-color: rgb(102, 204, 255);");
        ui->ResetDB->setText("DB 연결 성공");


        ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> DB 연결 성공. </ font>"));

    }
}

void MainWindow::on_ResetDB_clicked()
{
    QSqlDatabase database;
    QString hostName;
    QString port;
    QString databaseName;
    QString userName;
    QString password;
    \
    // 초기값 확인
    //    qDebug() << " AA: " << ui->lineEdit_1->text().isEmpty();
    //    qDebug() << " AA: " << ui->lineEdit_2->text().isEmpty();
    //    qDebug() << " AA: " << ui->lineEdit_2->text().toInt();
    //    qDebug() << " AA: " << ui->lineEdit_4->text().isEmpty();
    //    qDebug() << " AA: " << ui->lineEdit_5->text().isEmpty();

    database = QSqlDatabase::addDatabase("QMYSQL");
    db->setDatabase(database);

    if(!(ui->lineEdit_1->text().isEmpty()))
    {
        hostName = ui->lineEdit_1->text();
        db->setHostName(hostName);
        ui->lineEdit_1->setPlaceholderText("현재값: " + db->getHostName());
    }
    if(0 != (ui->lineEdit_2->text().toInt()))
    {
        port = ui->lineEdit_2->text();
        db->setPort(port.toInt());
        ui->lineEdit_2->setPlaceholderText("현재값: " + QString::number(db->getPort()));
    }
    if(!(ui->lineEdit_3->text().isEmpty()))
    {
        databaseName = ui->lineEdit_3->text();
        db->setDatabaseName(databaseName);

        ui->lineEdit_3->setPlaceholderText("현재값: " + db->getDatabaseName());
    }
    if(!(ui->lineEdit_4->text().isEmpty()))
    {
        userName = ui->lineEdit_4->text();
        db->setUserName(userName);
        ui->lineEdit_4->setPlaceholderText("현재값: " + db->getUserName());
    }
    if(!(ui->lineEdit_5->text().isEmpty()))
    {
        password = ui->lineEdit_5->text();
        db->setPassword(password);
        ui->lineEdit_5->setPlaceholderText("현재값: " + db->getPassword());
    }

    //    new input 값 확인;
    //    qDebug() << " c: " << db->getHostName();
    //    qDebug() << " c: " << db->getPort();
    //    qDebug() << " c: " << db->getDatabaseName();
    //    qDebug() << " c: " << db->getUserName();
    //    qDebug() << " c: " << db->getPassword();

    QSqlDatabase const &temp1 = db->getDatabase();
    db->ConnectDB();

    //    qDebug() << "BBB: "<< temp1;

    if(!temp1.database().open())
    {
        QMessageBox::information(this, "DB 연결", "DB 연결 실패, 재입력해주세요.");
        ui->lineEdit_1->setStyleSheet("color: rgb(239, 41, 41); padding-left:6px;");
        ui->lineEdit_2->setStyleSheet("color: rgb(239, 41, 41); padding-left:6px;");
        ui->lineEdit_3->setStyleSheet("color: rgb(239, 41, 41); padding-left:6px;");
        ui->lineEdit_4->setStyleSheet("color: rgb(239, 41, 41); padding-left:6px;");
        ui->lineEdit_5->setStyleSheet("color: rgb(239, 41, 41); padding-left:6px;");

        ui->ResetDB->setText("DB 연결 실패");
        QPixmap DBBG_error(":/img/55.png");
        ui->DBBG->setPixmap(DBBG_error);
        ui->DBBG->setPixmap(DBBG_error.scaled(960,540, Qt::KeepAspectRatio));
    }
    else
    {
        QMessageBox::information(this, "DB 연결", "DB 연결 성공 :)");
        ui->ResetDB->setStyleSheet("background-color: rgb(102, 204, 255);");
        ui->ResetDB->setText("DB 연결 성공");

        ui->textBrowser_receivedMessages->append(QString("<font style = ' color: GREEN;'> DB 연결 성공</ font>"));

        ui->lineEdit_1->setStyleSheet("color: rgb(52, 101, 164); padding-left:6px;");
        ui->lineEdit_2->setStyleSheet("color: rgb(52, 101, 164); padding-left:6px;");
        ui->lineEdit_3->setStyleSheet("color: rgb(52, 101, 164); padding-left:6px;");
        ui->lineEdit_4->setStyleSheet("color: rgb(52, 101, 164); padding-left:6px;");
        ui->lineEdit_5->setStyleSheet("color: rgb(52, 101, 164); padding-left:6px;");

        QPixmap DBBG_connected(":/img/66.png");
        ui->DBBG->setPixmap(DBBG_connected);
        ui->DBBG->setPixmap(DBBG_connected.scaled(960,540, Qt::KeepAspectRatio));
        ui->nextPage->setVisible(true);
    }

    ui->lineEdit_1->setPlaceholderText("현재값: " + db->getHostName());
    ui->lineEdit_2->setPlaceholderText("현재값: " + QString::number(db->getPort()));
    ui->lineEdit_3->setPlaceholderText("현재값: " + db->getDatabaseName());
    ui->lineEdit_4->setPlaceholderText("현재값: " + db->getUserName());
    ui->lineEdit_5->setPlaceholderText("현재값: " + db->getPassword());

    ui->lineEdit_1->clear();
    ui->lineEdit_2->clear();
    ui->lineEdit_3->clear();
    ui->lineEdit_4->clear();
    ui->lineEdit_5->clear();
}

void MainWindow::on_nextPage_clicked()
{
    ui->stackedWidget->setCurrentIndex(2);

}

